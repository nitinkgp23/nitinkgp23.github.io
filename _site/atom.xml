<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-12T07:58:44+05:30</updated><id>http://localhost:4000/</id><title type="html">Blogs, Tutorials and Musings</title><subtitle>Indian Institute of Technology, Kharagpur</subtitle><author><name>anomaly_</name></author><entry><title type="html">Got a droplet? What next?</title><link href="http://localhost:4000/tutorial/2017/11/07/Got-a-droplet-What-next/" rel="alternate" type="text/html" title="Got a droplet? What next?" /><published>2017-11-07T00:00:00+05:30</published><updated>2017-11-07T00:00:00+05:30</updated><id>http://localhost:4000/tutorial/2017/11/07/Got%20a%20droplet?%20What%20next?</id><content type="html" xml:base="http://localhost:4000/tutorial/2017/11/07/Got-a-droplet-What-next/">&lt;h1 id=&quot;getting-the-droplet&quot;&gt;Getting the droplet&lt;/h1&gt;

&lt;p&gt;You can get a droplet on DigitialOcean at some minimal price. I got mine using the Github Student Pack, which gives an initial credit of 50 $. Below is explained well, the steps to follow just after you have got the server.&lt;/p&gt;

&lt;p&gt;I will be using ssh-keys to login to the server, hence at the time of the creation of the droplet, I chose the option ‘Use SSH Keys’ and uploaded the content of the file id_rsa.pub present in ~/.ssh . This helped me avoid getting a password of the server through the email.&lt;/p&gt;

&lt;p&gt;After completing the processes online, come back to the terminal and type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@139.59.67.18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace the IP address with the server’s IP address. This won’t prompt you for a password if you have set up SSH as described above. (Also, make sure you are not behind a proxy or firewall.)&lt;/p&gt;

&lt;h1 id=&quot;creating-a-sudo-user-on-ubuntu&quot;&gt;Creating a sudo user on ubuntu&lt;/h1&gt;

&lt;p&gt;After ssh-ing into the server, the prompt becomes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@pascal ~ $ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Follow this DigitalOcean &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart&quot;&gt;tutorial&lt;/a&gt; to create a sudo user on the server. After following this tutorial, logout.&lt;/p&gt;

&lt;p&gt;Now, we will allow the user login through ssh. For this, follow the steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the server again using &lt;code class=&quot;highlighter-rouge&quot;&gt;root@139.59.67.18&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat .ssh/authorized_keys&lt;/code&gt;
 This will echo the contents of the file. Copy the contents.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;su - nitinkgp23&lt;/code&gt;
 nitinkgp23 is the username of the sudo user that we created following the DO tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir .ssh &amp;amp;&amp;amp; cd .ssh&lt;/code&gt; : Create the folder and cd into it.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch authorized_keys&lt;/code&gt; : Create the file.&lt;/li&gt;
  &lt;li&gt;Now, open the file using nano and paste the contents that you copied in Step 2.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~&lt;/code&gt; : Come back to the home folder.&lt;/li&gt;
  &lt;li&gt;Provide proper permissions to the ssh file :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; chmod 700 .ssh
 chmod 664 .ssh/authorized_keys
 chown nitinkgp23:nitinkgp23 /home/nitinkgp23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Logout&lt;/li&gt;
  &lt;li&gt;You can login to the server now using username : &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh nitinkgp23@139.59.67.18&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;install-and-configure-realvnc-to-access-gui&quot;&gt;Install and configure RealVNC to access GUI&lt;/h1&gt;

&lt;p&gt;Follow this &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-16-04&quot;&gt;tutorial&lt;/a&gt; to install RealVNC on your local computer and remote server.&lt;/p&gt;

&lt;p&gt;On running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;vncserver&lt;/code&gt; on remote server, suppose you get the output &lt;code class=&quot;highlighter-rouge&quot;&gt;New 'X' desktop is your_server_name.com:1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Keep note of the number &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; . Now, come back to local computer, start VNC-Viewer (Install it, if not installed already), and create a new connection. Give the IP address as &lt;code class=&quot;highlighter-rouge&quot;&gt;139.59.67.18:1&lt;/code&gt; . Note the number appended at last is &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;. This will start the GUI access to the droplet.&lt;/p&gt;

&lt;h1 id=&quot;workaround-for-proxy&quot;&gt;Workaround for proxy&lt;/h1&gt;</content><author><name>anomaly_</name></author><category term="droplet" /><category term="server" /><category term="ubuntu" /><summary type="html">Getting the droplet You can get a droplet on DigitialOcean at some minimal price. I got mine using the Github Student Pack, which gives an initial credit of 50 $. Below is explained well, the steps to follow just after you have got the server. I will be using ssh-keys to login to the server, hence at the time of the creation of the droplet, I chose the option ‘Use SSH Keys’ and uploaded the content of the file id_rsa.pub present in ~/.ssh . This helped me avoid getting a password of the server through the email. After completing the processes online, come back to the terminal and type: ssh root@139.59.67.18 Replace the IP address with the server’s IP address. This won’t prompt you for a password if you have set up SSH as described above. (Also, make sure you are not behind a proxy or firewall.) Creating a sudo user on ubuntu After ssh-ing into the server, the prompt becomes: root@pascal ~ $ Follow this DigitalOcean tutorial to create a sudo user on the server. After following this tutorial, logout. Now, we will allow the user login through ssh. For this, follow the steps: Login to the server again using root@139.59.67.18. cat .ssh/authorized_keys This will echo the contents of the file. Copy the contents. su - nitinkgp23 nitinkgp23 is the username of the sudo user that we created following the DO tutorial. mkdir .ssh &amp;amp;&amp;amp; cd .ssh : Create the folder and cd into it. touch authorized_keys : Create the file. Now, open the file using nano and paste the contents that you copied in Step 2. cd ~ : Come back to the home folder. Provide proper permissions to the ssh file : chmod 700 .ssh chmod 664 .ssh/authorized_keys chown nitinkgp23:nitinkgp23 /home/nitinkgp23 Logout You can login to the server now using username : ssh nitinkgp23@139.59.67.18 Install and configure RealVNC to access GUI Follow this tutorial to install RealVNC on your local computer and remote server. On running the command vncserver on remote server, suppose you get the output New 'X' desktop is your_server_name.com:1 Keep note of the number 1 . Now, come back to local computer, start VNC-Viewer (Install it, if not installed already), and create a new connection. Give the IP address as 139.59.67.18:1 . Note the number appended at last is 1. This will start the GUI access to the droplet. Workaround for proxy</summary></entry><entry><title type="html">Getting started with Go</title><link href="http://localhost:4000/tutorial/2017/10/29/getting-started-with-go/" rel="alternate" type="text/html" title="Getting started with Go" /><published>2017-10-29T00:00:00+05:30</published><updated>2017-10-29T00:00:00+05:30</updated><id>http://localhost:4000/tutorial/2017/10/29/getting-started-with-go</id><content type="html" xml:base="http://localhost:4000/tutorial/2017/10/29/getting-started-with-go/">&lt;p&gt;This tutorial walks through how I installed Go, and how I got started with it. I will keep on updating it, through my journey of learning Go.&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Retrieve the tarball using &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; by the following command:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, use &lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt; to extract the tarball :
 (Here &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; tells it to extract, &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; denotes verbose output and &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; denotes that we are mentioning a file name.)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tar xvf go1.6.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This creates a directory go in the home directory. We recursively change Go’s owner and group to root and move it to &lt;code class=&quot;highlighter-rouge&quot;&gt;usr/local&lt;/code&gt; :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo chown -R root:root ./go
 sudo mv go /usr/local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;usr/local/go&lt;/code&gt; is the offical recommended location.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting up paths :&lt;/p&gt;

    &lt;p&gt;At the end of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;, add the following lines:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; export GOPATH=$HOME/work/go
 export PATH=$PATH:/usr/local/bin:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;GOPATH contains the path of the folder where you will write all your Go programs. After saving the file, refresh it by doing:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; source ~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This completes our installation process.&lt;/p&gt;

&lt;h1 id=&quot;writing-hello-world-program&quot;&gt;Writing “Hello World” program&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Create a working directory (which you added in the .profile as GOPATH) :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mkdir -p work/go/src/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a simple Hello world file inside the above dir:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; nano ~/work/go/src/hello/hello.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Inside the editor, paste the code below:&lt;/p&gt;

    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello, world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Compile the above code using &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; command:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go install work/go/src/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This will create a binary in the dir &lt;code class=&quot;highlighter-rouge&quot;&gt;work/go/bin&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Execute this by just typing
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;since it is already added in the path.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>anomaly_</name></author><category term="go" /><summary type="html">This tutorial walks through how I installed Go, and how I got started with it. I will keep on updating it, through my journey of learning Go. Installation Retrieve the tarball using curl by the following command: curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz Next, use tar to extract the tarball : (Here x tells it to extract, v denotes verbose output and f denotes that we are mentioning a file name.) tar xvf go1.6.linux-amd64.tar.gz This creates a directory go in the home directory. We recursively change Go’s owner and group to root and move it to usr/local : sudo chown -R root:root ./go sudo mv go /usr/local (usr/local/go is the offical recommended location.) Setting up paths : At the end of the file ~/.profile, add the following lines: export GOPATH=$HOME/work/go export PATH=$PATH:/usr/local/bin:$GOPATH/bin GOPATH contains the path of the folder where you will write all your Go programs. After saving the file, refresh it by doing: source ~/.profile This completes our installation process. Writing “Hello World” program Create a working directory (which you added in the .profile as GOPATH) : mkdir -p work/go/src/hello Create a simple Hello world file inside the above dir: nano ~/work/go/src/hello/hello.go Inside the editor, paste the code below: package main import &quot;fmt&quot; func main() { fmt.Printf(&quot;hello, world\n&quot;) } Compile the above code using install command: go install work/go/src/hello This will create a binary in the dir work/go/bin Execute this by just typing hello since it is already added in the path.</summary></entry><entry><title type="html">GSoC wrap-up!</title><link href="http://localhost:4000/gsoc/2017/08/19/GSoC-wrap-up/" rel="alternate" type="text/html" title="GSoC wrap-up!" /><published>2017-08-19T00:00:00+05:30</published><updated>2017-08-19T00:00:00+05:30</updated><id>http://localhost:4000/gsoc/2017/08/19/GSoC-wrap-up</id><content type="html" xml:base="http://localhost:4000/gsoc/2017/08/19/GSoC-wrap-up/">&lt;p&gt;How time flies! Three months of the GSoC coding period are coming to an end now; most of the coding is done; documentation is done; testing is done. After missing 3 blog posts, unfortunately (I postponed it due to some rough time I had), here is a long one, describing whatever I did during my summers, and what else needs to be done before the PR gets merged.&lt;/p&gt;

&lt;p&gt;My GSoC project was divided into 2 parts, one was writing a full test-suite for the &lt;a href=&quot;https://github.com/kbg/drms&quot;&gt;drms package&lt;/a&gt;, and the second one was integrating this package into SunPy’s JSOC Client. While there are a few tests still remaining to be done for the first part, the second part is complete. Only blocker is passing of Travis build, which Cadair said, he will look into.&lt;/p&gt;

&lt;h2 id=&quot;test-suite-for-drms&quot;&gt;Test-suite for drms&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kbg/drms/pull/7&quot;&gt;This&lt;/a&gt; is the PR that contains all of my tests for the drms package :&lt;/p&gt;

&lt;p&gt;This PR adds tests for utils.py, config.py and client.py Covers config.py to 100% Covers utils.py to 81% WIP for client.&lt;/p&gt;

&lt;p&gt;The coverage for the drms package &amp;gt; 80% , after excluding those files for which tests are not required, for example, config.py . The only function that needs to be tested, is the download function, for which I couldn’t get enough time to do, due to some extra modifications that had to done in my Part-2 of the project.&lt;/p&gt;

&lt;p&gt;All the above tests are passing, as checked on my local computer, and all the functions other than the download function, are covered with the test-suite. Once the tests for the download function have been written, Travis can be added in the repository for the online builds, and can be converted into a conda package, later.&lt;/p&gt;

&lt;h2 id=&quot;the-new-jsoc-client&quot;&gt;The new JSOC-Client&lt;/h2&gt;

&lt;p&gt;My Part-2 of the project is contained in this &lt;a href=&quot;https://github.com/sunpy/sunpy/pull/2188&quot;&gt;PR&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;This PR aims to convert the old JSOC Client to use &lt;a href=&quot;https://github.com/kbg/drms&quot;&gt;drms&lt;/a&gt;, as its backend.&lt;/p&gt;

&lt;p&gt;This PR contains a total of 53 commits, with 1019 lines of code added, and 451 deletions as of now. It contains all of the summer project code, related to drms - SunPy integration, and contains the test-suite, documentation and the main code.&lt;/p&gt;

&lt;p&gt;The main changes that have been done in the SunPy client are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;search()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;get_request()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;request_data()&lt;/code&gt; functions have their backend changed. Now, it does all its operations through the drms package.&lt;/li&gt;
  &lt;li&gt;Note the change in the naming of the functions, &lt;code class=&quot;highlighter-rouge&quot;&gt;search()&lt;/code&gt; which was &lt;code class=&quot;highlighter-rouge&quot;&gt;query()&lt;/code&gt; earlier, and &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch()&lt;/code&gt; which was &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; earlier. This change hasn’t been made in this PR.&lt;/li&gt;
  &lt;li&gt;A new function &lt;code class=&quot;highlighter-rouge&quot;&gt;search_metadata()&lt;/code&gt; has been added, that takes the same input as the &lt;code class=&quot;highlighter-rouge&quot;&gt;search()&lt;/code&gt; function and returns the whole set of metadata for the queried files.&lt;/li&gt;
  &lt;li&gt;It returns a Pandas Dataframe that has rows as the queried files, and the columns as the name of keys for each file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.Compression()&lt;/code&gt; property has been removed, since downloading of uncompressed files are not supported.&lt;/li&gt;
  &lt;li&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;Series()&lt;/code&gt; is the only mandatory attribute that needs to be provided. Other than Series, you must provide the value of at least one prime-key. Passing of time attributes isn’t mandatory anymore.&lt;/li&gt;
  &lt;li&gt;You can pass Primekeys manually through &lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.PrimeKeys()&lt;/code&gt; attribute.&lt;/li&gt;
  &lt;li&gt;Basically, PrimeKeys are the keys that can identify one queried file from another. Not providing a PrimeKey will give an error, as more than one file can be located for the same set of keys passed. Hence, passing of at least one PrimeKey is mandatory.&lt;/li&gt;
  &lt;li&gt;Time is one of the primekeys that is common across all series. Hence, it has been predefined in &lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.Time()&lt;/code&gt; . Another common primekey in aia series data is &lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.Wavelength()&lt;/code&gt; which has also been predefined.&lt;/li&gt;
  &lt;li&gt;If you need to pass any other primekey manually, pass it through &lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.PrimeKeys()&lt;/code&gt; attribute, like &lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.PrimeKeys({'HARPNUM':'5264'})&lt;/code&gt; .&lt;/li&gt;
  &lt;li&gt;Keys can be manually passed. There is a default set of keywords like before, but you can override it by passing a list of keywords using &lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.Keys()&lt;/code&gt; attribute.&lt;/li&gt;
  &lt;li&gt;More than 1 segment can be passed at a time, and that won’t result in formation of two query blocks. i.e. Segments can be ANDed. That is, this is possible :
&lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.Segment('Dopplergram')&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;jsoc.attrs.Segment('magnetogram')&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;An interactive interface is built, in which when you pass an invalid segment name, or prime-key’s name, the code will break, and will give you the list of supported primekeys or segments, whichever be the case.
For example,
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;responses = client.search(jsoc.attrs.Time(‘2012/1/1T1:00:36’, ‘2012/1/1T01:00:38’),
     jsoc.attrs.Series(‘hmi.M_45s’), jsoc.attrs.Segment(‘foo’))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;gives an error this:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ValueError: Unexpected Segments were passed. The series hmi.M_45s contains the following Segments [‘magnetogram’]
which clearly mentions, which segment names can be passed for the given series.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the features of the new JSOC Client.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Apart from these, the PR contains, an extensive test-suite, that primarily focuses on the sunpy functionalities, that is, the functions &lt;code class=&quot;highlighter-rouge&quot;&gt;_lookup_records()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_make_recordset()&lt;/code&gt;. All corner cases and combinations have been tested. The part that uses the drms package, hasn’t been tested extensively (though, at least one check has been added for all the functions), since drms already covers those tests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The docstrings after each function in the file jsoc.py is very detailed, and is full of examples. The narrative documentation is also detailed, explaining how to use jsoc client, both through Fido and direct usage. The narrative docs are also full of examples.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, the sunpy integration of drms is complete. The only remaining blocker is that Travis fails for python 2.7 in installing drms. It will hopefully be solved soon.&lt;/p&gt;

&lt;h2 id=&quot;modifying-time-attribute-of-vso&quot;&gt;Modifying Time attribute of VSO&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sunpy/sunpy/pull/2260&quot;&gt;This&lt;/a&gt; is one of my very recent PRs :&lt;/p&gt;

&lt;p&gt;This is WIP, and is a very initial effort to modify the Time attribute of VSO Client to return an astropy.time object instead of a datetime.datetime object. This was needed in order to support input of time in other Time scales, such as TAI.&lt;/p&gt;

&lt;p&gt;This is WIP, and will be hopefully completed before the coding period is over.&lt;/p&gt;

&lt;p&gt;And so, the summer time flew! I really enjoyed working on the project, and learned a great deal, about how to write software, and especially how to test them. My other project proposal, which was about developing the package Sunkit-image, is still in my wishlist, and would love to take it up after I have wrapped this whole thing up.&lt;/p&gt;

&lt;p&gt;GSoC was one hell of an experience! Thank you Sunpy! Thank you Google! :D :D&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="gsoc" /><category term="open-source" /><category term="sunpy" /><category term="drms" /><summary type="html">How time flies! Three months of the GSoC coding period are coming to an end now; most of the coding is done; documentation is done; testing is done. After missing 3 blog posts, unfortunately (I postponed it due to some rough time I had), here is a long one, describing whatever I did during my summers, and what else needs to be done before the PR gets merged. My GSoC project was divided into 2 parts, one was writing a full test-suite for the drms package, and the second one was integrating this package into SunPy’s JSOC Client. While there are a few tests still remaining to be done for the first part, the second part is complete. Only blocker is passing of Travis build, which Cadair said, he will look into. Test-suite for drms This is the PR that contains all of my tests for the drms package : This PR adds tests for utils.py, config.py and client.py Covers config.py to 100% Covers utils.py to 81% WIP for client. The coverage for the drms package &amp;gt; 80% , after excluding those files for which tests are not required, for example, config.py . The only function that needs to be tested, is the download function, for which I couldn’t get enough time to do, due to some extra modifications that had to done in my Part-2 of the project. All the above tests are passing, as checked on my local computer, and all the functions other than the download function, are covered with the test-suite. Once the tests for the download function have been written, Travis can be added in the repository for the online builds, and can be converted into a conda package, later. The new JSOC-Client My Part-2 of the project is contained in this PR: This PR aims to convert the old JSOC Client to use drms, as its backend. This PR contains a total of 53 commits, with 1019 lines of code added, and 451 deletions as of now. It contains all of the summer project code, related to drms - SunPy integration, and contains the test-suite, documentation and the main code. The main changes that have been done in the SunPy client are: search(), fetch(), get_request() and request_data() functions have their backend changed. Now, it does all its operations through the drms package. Note the change in the naming of the functions, search() which was query() earlier, and fetch() which was get() earlier. This change hasn’t been made in this PR. A new function search_metadata() has been added, that takes the same input as the search() function and returns the whole set of metadata for the queried files. It returns a Pandas Dataframe that has rows as the queried files, and the columns as the name of keys for each file. jsoc.attrs.Compression() property has been removed, since downloading of uncompressed files are not supported. Now, Series() is the only mandatory attribute that needs to be provided. Other than Series, you must provide the value of at least one prime-key. Passing of time attributes isn’t mandatory anymore. You can pass Primekeys manually through jsoc.attrs.PrimeKeys() attribute. Basically, PrimeKeys are the keys that can identify one queried file from another. Not providing a PrimeKey will give an error, as more than one file can be located for the same set of keys passed. Hence, passing of at least one PrimeKey is mandatory. Time is one of the primekeys that is common across all series. Hence, it has been predefined in jsoc.attrs.Time() . Another common primekey in aia series data is jsoc.attrs.Wavelength() which has also been predefined. If you need to pass any other primekey manually, pass it through jsoc.attrs.PrimeKeys() attribute, like jsoc.attrs.PrimeKeys({'HARPNUM':'5264'}) . Keys can be manually passed. There is a default set of keywords like before, but you can override it by passing a list of keywords using jsoc.attrs.Keys() attribute. More than 1 segment can be passed at a time, and that won’t result in formation of two query blocks. i.e. Segments can be ANDed. That is, this is possible : jsoc.attrs.Segment('Dopplergram') &amp;amp; jsoc.attrs.Segment('magnetogram') An interactive interface is built, in which when you pass an invalid segment name, or prime-key’s name, the code will break, and will give you the list of supported primekeys or segments, whichever be the case. For example, responses = client.search(jsoc.attrs.Time(‘2012/1/1T1:00:36’, ‘2012/1/1T01:00:38’), jsoc.attrs.Series(‘hmi.M_45s’), jsoc.attrs.Segment(‘foo’)) gives an error this: ValueError: Unexpected Segments were passed. The series hmi.M_45s contains the following Segments [‘magnetogram’] which clearly mentions, which segment names can be passed for the given series. These are the features of the new JSOC Client. Apart from these, the PR contains, an extensive test-suite, that primarily focuses on the sunpy functionalities, that is, the functions _lookup_records() and _make_recordset(). All corner cases and combinations have been tested. The part that uses the drms package, hasn’t been tested extensively (though, at least one check has been added for all the functions), since drms already covers those tests. The docstrings after each function in the file jsoc.py is very detailed, and is full of examples. The narrative documentation is also detailed, explaining how to use jsoc client, both through Fido and direct usage. The narrative docs are also full of examples. Hence, the sunpy integration of drms is complete. The only remaining blocker is that Travis fails for python 2.7 in installing drms. It will hopefully be solved soon. Modifying Time attribute of VSO This is one of my very recent PRs : This is WIP, and is a very initial effort to modify the Time attribute of VSO Client to return an astropy.time object instead of a datetime.datetime object. This was needed in order to support input of time in other Time scales, such as TAI. This is WIP, and will be hopefully completed before the coding period is over. And so, the summer time flew! I really enjoyed working on the project, and learned a great deal, about how to write software, and especially how to test them. My other project proposal, which was about developing the package Sunkit-image, is still in my wishlist, and would love to take it up after I have wrapped this whole thing up. GSoC was one hell of an experience! Thank you Sunpy! Thank you Google! :D :D</summary></entry><entry><title type="html">1st evaluation knocks!</title><link href="http://localhost:4000/gsoc/2017/06/28/1st-evaluation-knocks/" rel="alternate" type="text/html" title="1st evaluation knocks!" /><published>2017-06-28T00:00:00+05:30</published><updated>2017-06-28T00:00:00+05:30</updated><id>http://localhost:4000/gsoc/2017/06/28/1st-evaluation-knocks</id><content type="html" xml:base="http://localhost:4000/gsoc/2017/06/28/1st-evaluation-knocks/">&lt;p&gt;It’s a month now, since the coding period has begun, and here comes the week of evaluation. My mentors will be evaluating me on the work that has been done till now, and I wish I pass this.&lt;/p&gt;

&lt;p&gt;There has been a little change in my plan, and last week, I stopped with writing tests for drms, and started doing the sunpy integration. Writing tests for 3 weeks got a bit monotonous for me, and hence I put up this idea with my mentors, on which they gladly agreed. It was going to give me a good break from writing tests for a while.&lt;/p&gt;

&lt;p&gt;Until now, I have achieved the following tasks:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Covered the drms package to 66%
All the offline tests have been written, and jsoc tests have also been completed. The only thing that remains is testing the download function which will require mocking.
Mocking will also be required to avoid the online tests of jsoc.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have planned to continue with the drms tests, especially mocking, from my 8th week of the coding period, just after my second evaluation. This phase of the coding period will be given to sunpy integration of the drms package.&lt;/p&gt;

&lt;p&gt;The work done so far in drms is contained in this &lt;a href=&quot;https://github.com/kbg/drms/pull/7&quot;&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In SunPy integration, I have integrated these parts:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Modified the query function of JSOC-Client to use the drms’ query function. Currently, basic requests can be made by providing keys only.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I aim to completely modify the query function, implementing all the necessary features, within a couple of days. I will go ahead with modifying the export method in the next week.&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="gsoc" /><category term="open-source" /><category term="sunpy" /><category term="drms" /><summary type="html">It’s a month now, since the coding period has begun, and here comes the week of evaluation. My mentors will be evaluating me on the work that has been done till now, and I wish I pass this. There has been a little change in my plan, and last week, I stopped with writing tests for drms, and started doing the sunpy integration. Writing tests for 3 weeks got a bit monotonous for me, and hence I put up this idea with my mentors, on which they gladly agreed. It was going to give me a good break from writing tests for a while. Until now, I have achieved the following tasks: Covered the drms package to 66% All the offline tests have been written, and jsoc tests have also been completed. The only thing that remains is testing the download function which will require mocking. Mocking will also be required to avoid the online tests of jsoc. I have planned to continue with the drms tests, especially mocking, from my 8th week of the coding period, just after my second evaluation. This phase of the coding period will be given to sunpy integration of the drms package. The work done so far in drms is contained in this PR. In SunPy integration, I have integrated these parts: Modified the query function of JSOC-Client to use the drms’ query function. Currently, basic requests can be made by providing keys only. I aim to completely modify the query function, implementing all the necessary features, within a couple of days. I will go ahead with modifying the export method in the next week.</summary></entry><entry><title type="html">2 weeks of coding period</title><link href="http://localhost:4000/gsoc/2017/06/17/2-weeks-of-coding-period/" rel="alternate" type="text/html" title="2 weeks of coding period" /><published>2017-06-17T00:00:00+05:30</published><updated>2017-06-17T00:00:00+05:30</updated><id>http://localhost:4000/gsoc/2017/06/17/2-weeks-of-coding-period</id><content type="html" xml:base="http://localhost:4000/gsoc/2017/06/17/2-weeks-of-coding-period/">&lt;p&gt;Well, to be honest, 2 weeks of coding period is already past, and I haven’t yet started the main challenge — mocking! Though, the test coverage has reached to 64% already, but there are a lots of important tests to be written.&lt;/p&gt;

&lt;p&gt;My internship period is finally over, and from now on, I can devote 8 hrs per day easily. This will help me to makeup for the time I lost during these 2 weeks. According to my timeline, I had to finish up the drms part of the project before my first evaluation, and then go ahead with rewriting SunPy’s JSOC Client in my second phase of the coding period. Although I will try to stick to this to the best of my ability, I may require an extra week for finalising the drms package.&lt;/p&gt;

&lt;p&gt;This shift won’t be a problem, as I had already spared 3 weeks of time at the end of my coding period as a buffer. I will be updating with whatever I do this week and next, in my next blog.&lt;/p&gt;

&lt;p&gt;Let’s hope I have finished up most of my tests when I am writing my next blog!
&lt;a href=&quot;https://cdn-images-1.medium.com/max/800/1*g9NWL0cA94n1PiK4Aoe3og.gif&quot;&gt;gif&lt;/a&gt;&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="gsoc" /><category term="open-source" /><category term="sunpy" /><category term="drms" /><summary type="html">Well, to be honest, 2 weeks of coding period is already past, and I haven’t yet started the main challenge — mocking! Though, the test coverage has reached to 64% already, but there are a lots of important tests to be written. My internship period is finally over, and from now on, I can devote 8 hrs per day easily. This will help me to makeup for the time I lost during these 2 weeks. According to my timeline, I had to finish up the drms part of the project before my first evaluation, and then go ahead with rewriting SunPy’s JSOC Client in my second phase of the coding period. Although I will try to stick to this to the best of my ability, I may require an extra week for finalising the drms package. This shift won’t be a problem, as I had already spared 3 weeks of time at the end of my coding period as a buffer. I will be updating with whatever I do this week and next, in my next blog. Let’s hope I have finished up most of my tests when I am writing my next blog! gif</summary></entry><entry><title type="html">Anddd.. The coding period begins!</title><link href="http://localhost:4000/gsoc/2017/05/31/Anddd-the-coding-period-begins/" rel="alternate" type="text/html" title="Anddd.. The coding period begins!" /><published>2017-05-31T00:00:00+05:30</published><updated>2017-05-31T00:00:00+05:30</updated><id>http://localhost:4000/gsoc/2017/05/31/Anddd-the-coding-period-begins</id><content type="html" xml:base="http://localhost:4000/gsoc/2017/05/31/Anddd-the-coding-period-begins/">&lt;p&gt;After wasting away a full month of community bonding period (Naah, not wasting :/. I was busy doing an internship.), the coding period has finally arrived at my doors. I still have no idea about how I will begin with writing mock tests, and how will I achieve a full code coverage of 100% within 4 weeks.
&lt;a href=&quot;https://cdn-images-1.medium.com/max/800/1*1EUR27g31w4wltCoEbOP5g.gif&quot;&gt;gif&lt;/a&gt;
Absolutely no idea what’s happening!&lt;/p&gt;

&lt;p&gt;Anyways, let’s see what happens next.&lt;/p&gt;

&lt;p&gt;Kolja has been helping me by pushing some of his already written tests, and the coverage has already reached to almost 35%. But, the most challenging part of Phase 1 is yet to be started — writing Mocks.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mocking is simply the act of replacing the part of the application you are testing with a dummy version of that part called a mock. Instead of calling the actual implementation, you would call the mock, and then make assertions about what you expect to happen.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python has a built-in library called unittest.mock that is used for creating mock objects. Going through numerous articles, blogs and video lectures, I have finally made sense of this weird technique. Yeah, weird, because although I say, I have made sense of it, I won’t be able to mock even a simple API call.
&lt;a href=&quot;https://cdn-images-1.medium.com/max/800/1*oLlrmK5ps4sJDpRW8hwwpg.gif&quot;&gt;gif&lt;/a&gt;
I am so ashamed of myself! :’(&lt;/p&gt;

&lt;p&gt;The drms module for which, I have to write tests, fetches data from a server. So, to avoid interacting with the servers, or connecting online, every time the tests are run is, not a very good idea. With other alternatives to this option, one of them is to mock the objects. I have planned to finish up the testing part, in 3 weeks, and kept the last 1 week as buffer. I hope I pass my 1st evaluation!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cdn-images-1.medium.com/max/800/1*Jy-G4hziENez5JVhwx1hHA.gif&quot;&gt;gif&lt;/a&gt;
Dear Lord, give me strength!&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="gsoc" /><category term="open-source" /><category term="sunpy" /><category term="drms" /><summary type="html">After wasting away a full month of community bonding period (Naah, not wasting :/. I was busy doing an internship.), the coding period has finally arrived at my doors. I still have no idea about how I will begin with writing mock tests, and how will I achieve a full code coverage of 100% within 4 weeks. gif Absolutely no idea what’s happening! Anyways, let’s see what happens next. Kolja has been helping me by pushing some of his already written tests, and the coverage has already reached to almost 35%. But, the most challenging part of Phase 1 is yet to be started — writing Mocks. Mocking is simply the act of replacing the part of the application you are testing with a dummy version of that part called a mock. Instead of calling the actual implementation, you would call the mock, and then make assertions about what you expect to happen. Python has a built-in library called unittest.mock that is used for creating mock objects. Going through numerous articles, blogs and video lectures, I have finally made sense of this weird technique. Yeah, weird, because although I say, I have made sense of it, I won’t be able to mock even a simple API call. gif I am so ashamed of myself! :’( The drms module for which, I have to write tests, fetches data from a server. So, to avoid interacting with the servers, or connecting online, every time the tests are run is, not a very good idea. With other alternatives to this option, one of them is to mock the objects. I have planned to finish up the testing part, in 3 weeks, and kept the last 1 week as buffer. I hope I pass my 1st evaluation! gif Dear Lord, give me strength!</summary></entry><entry><title type="html">GSoC Application selected</title><link href="http://localhost:4000/gsoc/2017/05/09/GSoC-Application-selected/" rel="alternate" type="text/html" title="GSoC Application selected" /><published>2017-05-09T00:00:00+05:30</published><updated>2017-05-09T00:00:00+05:30</updated><id>http://localhost:4000/gsoc/2017/05/09/GSoC-Application-selected</id><content type="html" xml:base="http://localhost:4000/gsoc/2017/05/09/GSoC-Application-selected/">&lt;p&gt;Well, I was on a trek this week, on a height of about 4000 meters and it wasn’t a surprise that I had no network there. The day the GSoC results came, I was unaware of all the happenings going down there. I was dying to get back down, and see whether my 2 months of toiling hard work had born fruit.&lt;/p&gt;

&lt;p&gt;I had managed to submit two proposals in SunPy before the deadline. Yes, TWO! In my last blog post, I talked about how interesting the project Sunkit-image sounded to me, and how I was looking forward to prepare a proposal for it. Anyways, things changed a bit, when Cadair asked to me look a bit on the other project- improving the Drms module for JSOC downloads.&lt;/p&gt;

&lt;p&gt;This was the project I had initially chosen to work on, but had dropped it due to lack of ideas. Things came back to life when the project came up on the ideas page and when I had a thorough discussion with Kolja, the main developer of the drms package.&lt;/p&gt;

&lt;p&gt;Finally, after a series of night-outs and toiling hard work, I was successful in submitting both the proposals — one for the Sunkit-image and the other for Drms module for JSOC Downloads.&lt;/p&gt;

&lt;p&gt;And guess what, the Drms project was finally selected! Looking forward to having a great summer ahead, while I work with Kolja and Monica (my mentors for this project) to improve the drms module and the JSOC Client.&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="gsoc" /><category term="open-source" /><category term="sunpy" /><category term="drms" /><summary type="html">Well, I was on a trek this week, on a height of about 4000 meters and it wasn’t a surprise that I had no network there. The day the GSoC results came, I was unaware of all the happenings going down there. I was dying to get back down, and see whether my 2 months of toiling hard work had born fruit. I had managed to submit two proposals in SunPy before the deadline. Yes, TWO! In my last blog post, I talked about how interesting the project Sunkit-image sounded to me, and how I was looking forward to prepare a proposal for it. Anyways, things changed a bit, when Cadair asked to me look a bit on the other project- improving the Drms module for JSOC downloads. This was the project I had initially chosen to work on, but had dropped it due to lack of ideas. Things came back to life when the project came up on the ideas page and when I had a thorough discussion with Kolja, the main developer of the drms package. Finally, after a series of night-outs and toiling hard work, I was successful in submitting both the proposals — one for the Sunkit-image and the other for Drms module for JSOC Downloads. And guess what, the Drms project was finally selected! Looking forward to having a great summer ahead, while I work with Kolja and Monica (my mentors for this project) to improve the drms module and the JSOC Client. Cheers.</summary></entry><entry><title type="html">GSoC Organisation List out</title><link href="http://localhost:4000/gsoc/2017/03/09/GSoC-Organisation-List-out/" rel="alternate" type="text/html" title="GSoC Organisation List out" /><published>2017-03-09T00:00:00+05:30</published><updated>2017-03-09T00:00:00+05:30</updated><id>http://localhost:4000/gsoc/2017/03/09/GSoC-Organisation-List-out</id><content type="html" xml:base="http://localhost:4000/gsoc/2017/03/09/GSoC-Organisation-List-out/">&lt;p&gt;27th of February, it is. I am enjoying at a party with the other KOSS people. Somewhere far away, a PR was getting merged, to show to the world (not literally, only the GSoC aspirants) which organizations would participate in Google Summer of Code 2017. I didn’t have to worry (&lt;em&gt;Overconfidence&lt;/em&gt;) , cause I was sure OpenAstronomy would be selected.&lt;/p&gt;

&lt;p&gt;I had been involved with SunPy over a fortnight now, and I was sure of doing a project under this org. Although, I am not an astrophysicist (nor I plan to be :p), my long lost interest in astronomy came back alive when I started working with this org. All those times in my high school, when I dreamed of becoming an astrophysicist, or reading about Einstein’s Theory of Relativity and spending hours understanding the Twin’s paradox or Lorrentz’s contraction. Ahh! Those days. And, then somehow, software caught me. :/&lt;/p&gt;

&lt;p&gt;But, who knew I would someday be developing such cool software and working on such interesting projects, all related to astronomy and our very own, the Sun!&lt;/p&gt;

&lt;p&gt;I started to look for some bugs that I could solve, and some documentation fixes that I could do, that would help me get familiar with the code base. I had to decide a project too, and I got a wonderful one that fitted all my interests. Having done some image-processing before, I had to develop whole of a library in SunPy, named Sunkit-image, that would deal with all the image processing routines in solar analysis.&lt;/p&gt;

&lt;p&gt;Currently, I am working on my proposal, trying to understand the codebase as much as I can, reading up papers, getting intimidated by how cool things our scientists do!&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="gsoc" /><category term="open-source" /><category term="sunpy" /><category term="drms" /><summary type="html">27th of February, it is. I am enjoying at a party with the other KOSS people. Somewhere far away, a PR was getting merged, to show to the world (not literally, only the GSoC aspirants) which organizations would participate in Google Summer of Code 2017. I didn’t have to worry (Overconfidence) , cause I was sure OpenAstronomy would be selected. I had been involved with SunPy over a fortnight now, and I was sure of doing a project under this org. Although, I am not an astrophysicist (nor I plan to be :p), my long lost interest in astronomy came back alive when I started working with this org. All those times in my high school, when I dreamed of becoming an astrophysicist, or reading about Einstein’s Theory of Relativity and spending hours understanding the Twin’s paradox or Lorrentz’s contraction. Ahh! Those days. And, then somehow, software caught me. :/ But, who knew I would someday be developing such cool software and working on such interesting projects, all related to astronomy and our very own, the Sun! I started to look for some bugs that I could solve, and some documentation fixes that I could do, that would help me get familiar with the code base. I had to decide a project too, and I got a wonderful one that fitted all my interests. Having done some image-processing before, I had to develop whole of a library in SunPy, named Sunkit-image, that would deal with all the image processing routines in solar analysis. Currently, I am working on my proposal, trying to understand the codebase as much as I can, reading up papers, getting intimidated by how cool things our scientists do!</summary></entry><entry><title type="html">Home automation</title><link href="http://localhost:4000/tutorial/2017/03/04/home-automation/" rel="alternate" type="text/html" title="Home automation" /><published>2017-03-04T00:00:00+05:30</published><updated>2017-03-04T00:00:00+05:30</updated><id>http://localhost:4000/tutorial/2017/03/04/home-automation</id><content type="html" xml:base="http://localhost:4000/tutorial/2017/03/04/home-automation/">&lt;p&gt;Lying on the bed, just before dozing off to sleep every night, I wondered how wonderful it would be if my roomie would get up from his bed and switch off the tubelight for me. Ohh, throwing all sort of tantrums and tempting offers to my roomies to make them get up from bed for me was hell of a job. Sometimes I would succeed, but mostly, I would have to get out from the quilt, in shivering cold, and trouble my legs to walk a 3 metre distance to turn off the switch.
&lt;!-- more --&gt;
And then, I came across this wonderful thing called Arduino. A bit of googling, and I was ready to automate my tubelights and fans, so that I would control them from my mobile phone itself. No more tantrums and no more trouble to my legs. I was glad.&lt;/p&gt;

&lt;p&gt;Here is a detailed explanation of what I used, and the steps required to automate your room!&lt;/p&gt;

&lt;h2 id=&quot;required&quot;&gt;Required&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Arduino UNO  (Purchase here)&lt;/li&gt;
  &lt;li&gt;Bluetooth Module (Purchase here)&lt;/li&gt;
  &lt;li&gt;Breadboard / PCB board&lt;/li&gt;
  &lt;li&gt;Wires , Jumper wires&lt;/li&gt;
  &lt;li&gt;12 V relay (1 relay for each device you want to control)&lt;/li&gt;
  &lt;li&gt;12 V adapter&lt;/li&gt;
  &lt;li&gt;TIP 122 transistor&lt;/li&gt;
  &lt;li&gt;Android phone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog won’t explain the theoretical reasons behind each of the steps, or the working of Arduino or anything that is of no use in the project. It just serves as a guide to the steps you need to follow, to build a home automated system. A little knowledge about how circuits work will suffice.&lt;/p&gt;

&lt;p&gt;This is an Arduino UNO board. There are 14 digital I/O pins, and 6 analog inputs, 3 GND pins, a 3.3 V and a 5 V pin. We will be using pin 13 for controlling the appliance, pin 1 and pin 0 will be used for connecting to the bluetooth module, and 5 V pin will be used to power the bluetooth module. GND pins will be used for connecting to the ground.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/48912-arduinouno_r3_front.jpg&quot; alt=&quot;Arduino&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is HC-05 bluetooth module, which will be used for communicating through the mobile device. It will have the usual range of 10 m, but if you want to have a higher range, you can look at other modules available online.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/134883010_14170929051_large1.jpg&quot; alt=&quot;HC-05 bluetooth module&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The module that you have bought might consist of 6 pins, but we will be using only 4 pins that lie in the middle, labelled VCC, GND, TX and RX. An important thing to note here is that, TX pins have to be connected at 3.3 V Level, whereas the power required in the bluetooth module is 3.6-6 V. Hence, we have to use the 5 V pin from the arduino to power the module, and divide the voltage and drop it down to 3.3 V, so that bluetooth module doesn’t get cooked up.&lt;/p&gt;

&lt;p&gt;Here is how a connection should be made between arduino and the bluetooth module :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/134883010_14170929051_large1.jpg&quot; alt=&quot;Connecting arduino and bluetooth&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;points-to-be-noted&quot;&gt;Points to be noted:&lt;/h4&gt;

&lt;p&gt;RX pin of the module connects to TX pin of the arduino and vice-versa.
TX pin of the module works at not more than 3.3 V level, hence a voltage-divider circuit is used, where 1/3 * 5 V goes to the GND, whereas only 2/3 * 5 V is used up in the RX pin of the arduino.
Connect GND of the module to any of the GND pins on the arduino board.
Connect VCC of the module to 5 V pin of the arduino board.
Controlling a LED by bluetooth:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/screenshot-from-2017-01-17-17-09-55.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make the above connection. The above diagram only shows how to make the connection. You are free to connect the LED and wires through PCB board or breadboard. Use a proper resistor according to the LED you are using.&lt;/p&gt;

&lt;p&gt;A 220 ohm resistor for a red LED will be okay, if you are connecting the arduino by USB,&lt;/p&gt;

&lt;h4 id=&quot;uploading-the-code-to-arduino-board-&quot;&gt;Uploading the code to Arduino board :&lt;/h4&gt;

&lt;p&gt;First of all, download Arduino IDE from here. Follow the instructions and install the IDE. Connect the arduino board to computer, and upload the following code to the board. Google a bit on how to use the Arduino IDE, and how to upload a code. While uploading, make sure you have disconnected the RX and TX pins from the bluetooth module, otherwise an error will flash up. After the code has uploaded successfully, reconnect the RX and TX pins.&lt;/p&gt;

&lt;h4 id=&quot;downloading-the-app-from-play-store-&quot;&gt;Downloading the app from play store :&lt;/h4&gt;

&lt;p&gt;Download &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.app.control&amp;amp;hl=en&quot;&gt;this&lt;/a&gt; app from Google Play Store (Arduino bluetooth control , by Guiming Apps), and install it in your android phone.&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="arduino" /><category term="automation" /><summary type="html">Lying on the bed, just before dozing off to sleep every night, I wondered how wonderful it would be if my roomie would get up from his bed and switch off the tubelight for me. Ohh, throwing all sort of tantrums and tempting offers to my roomies to make them get up from bed for me was hell of a job. Sometimes I would succeed, but mostly, I would have to get out from the quilt, in shivering cold, and trouble my legs to walk a 3 metre distance to turn off the switch.</summary></entry><entry><title type="html">Theme posts</title><link href="http://localhost:4000/foo/2013/12/25/post-stylings/" rel="alternate" type="text/html" title="Theme posts" /><published>2013-12-25T05:00:04+05:30</published><updated>2013-12-25T05:00:04+05:30</updated><id>http://localhost:4000/foo/2013/12/25/post%20stylings</id><content type="html" xml:base="http://localhost:4000/foo/2013/12/25/post-stylings/">&lt;p&gt;This is a link post. Clicking on the link should open &lt;a href=&quot;http://www.google.com/&quot;&gt;Google&lt;/a&gt; in a new tab or window.&lt;/p&gt;

&lt;h2 id=&quot;block-quote&quot;&gt;Block Quote&lt;/h2&gt;

&lt;h3 id=&quot;normal-blockquote&quot;&gt;Normal blockquote&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.
&lt;!-- more --&gt;&lt;/p&gt;
  &lt;h2 id=&quot;code-block&quot;&gt;Code Block&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;inline-code-block&quot;&gt;Inline code block&lt;/h3&gt;

&lt;p&gt;This is a inline code block: &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;print 'helloworld'&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;normal-code-block&quot;&gt;Normal code block&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert('Hello World!');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print &quot;Hello world&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;highlight-code-block&quot;&gt;Highlight code block&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;gist&quot;&gt;Gist&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/996818.js&quot;&gt; &lt;/script&gt;</content><author><name>anomaly_</name></author><summary type="html">This is a link post. Clicking on the link should open Google in a new tab or window. Block Quote Normal blockquote Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.</summary></entry></feed>