<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-07T01:15:43+05:30</updated><id>http://localhost:4000/</id><title type="html">Blogs, Tutorials and Musings</title><subtitle>Indian Institute of Technology, Kharagpur</subtitle><author><name>anomaly_</name></author><entry><title type="html">Got a droplet? What next?</title><link href="http://localhost:4000/tutorial/2017/11/07/Got-a-droplet-What-next/" rel="alternate" type="text/html" title="Got a droplet? What next?" /><published>2017-11-07T00:00:00+05:30</published><updated>2017-11-07T00:00:00+05:30</updated><id>http://localhost:4000/tutorial/2017/11/07/Got%20a%20droplet?%20What%20next?</id><content type="html" xml:base="http://localhost:4000/tutorial/2017/11/07/Got-a-droplet-What-next/">&lt;h1 id=&quot;getting-the-droplet&quot;&gt;Getting the droplet&lt;/h1&gt;

&lt;p&gt;You can get a droplet on DigitialOcean at some minimal price. I got mine using the Github Student Pack, which gives an initial credit of 50 $. Below is explained well, the steps to follow just after you have got the server.&lt;/p&gt;

&lt;p&gt;I will be using ssh-keys to login to the server, hence at the time of the creation of the droplet, I chose the option ‘Use SSH Keys’ and uploaded the content of the file id_rsa.pub present in ~/.ssh . This helped me avoid getting a password of the server through the email.&lt;/p&gt;

&lt;p&gt;After completing the processes online, come back to the terminal and type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@139.59.67.18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replace the IP address with the server’s IP address. This won’t prompt you for a password if you have set up SSH as described above. (Also, make sure you are not behind a proxy or firewall.)&lt;/p&gt;

&lt;h1 id=&quot;creating-a-sudo-user-on-ubuntu&quot;&gt;Creating a sudo user on ubuntu&lt;/h1&gt;

&lt;p&gt;After ssh-ing into the server, the prompt becomes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@pascal ~ $ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Follow this DigitalOcean &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart&quot;&gt;tutorial&lt;/a&gt; to create a sudo user on the server. After following this tutorial, logout.&lt;/p&gt;

&lt;p&gt;Now, we will allow the user login through ssh. For this, follow the steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the server again using &lt;code class=&quot;highlighter-rouge&quot;&gt;root@139.59.67.18&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat .ssh/authorized_keys&lt;/code&gt;
 This will echo the contents of the file. Copy the contents.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;su - nitinkgp23&lt;/code&gt;
 nitinkgp23 is the username of the sudo user that we created following the DO tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir .ssh &amp;amp;&amp;amp; cd .ssh&lt;/code&gt; : Create the folder and cd into it.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch authorized_keys&lt;/code&gt; : Create the file.&lt;/li&gt;
  &lt;li&gt;Now, open the file using nano and paste the contents that you copied in Step 2.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~&lt;/code&gt; : Come back to the home folder.&lt;/li&gt;
  &lt;li&gt;Provide proper permissions to the ssh file :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; chmod 700 .ssh
 chmod 664 .ssh/authorized_keys
 chown nitinkgp23:nitinkgp23 /home/nitinkgp23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Logout&lt;/li&gt;
  &lt;li&gt;You can login to the server now using username : &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh nitinkgp23@139.59.67.18&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;install-and-configure-realvnc-to-access-gui&quot;&gt;Install and configure RealVNC to access GUI&lt;/h1&gt;

&lt;p&gt;Follow this &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-16-04&quot;&gt;tutorial&lt;/a&gt; to install RealVNC on your local computer and remote server.&lt;/p&gt;

&lt;p&gt;On running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;vncserver&lt;/code&gt; on remote server, suppose you get the output &lt;code class=&quot;highlighter-rouge&quot;&gt;New 'X' desktop is your_server_name.com:1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Keep note of the number &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; . Now, come back to local computer, start VNC-Viewer (Install it, if not installed already), and create a new connection. Give the IP address as &lt;code class=&quot;highlighter-rouge&quot;&gt;139.59.67.18:1&lt;/code&gt; . Note the number appended at last is &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;. This will start the GUI access to the droplet.&lt;/p&gt;

&lt;h1 id=&quot;workaround-for-proxy&quot;&gt;Workaround for proxy&lt;/h1&gt;</content><author><name>anomaly_</name></author><category term="droplet" /><category term="server" /><category term="ubuntu" /><summary type="html">Getting the droplet You can get a droplet on DigitialOcean at some minimal price. I got mine using the Github Student Pack, which gives an initial credit of 50 $. Below is explained well, the steps to follow just after you have got the server. I will be using ssh-keys to login to the server, hence at the time of the creation of the droplet, I chose the option ‘Use SSH Keys’ and uploaded the content of the file id_rsa.pub present in ~/.ssh . This helped me avoid getting a password of the server through the email. After completing the processes online, come back to the terminal and type: ssh root@139.59.67.18 Replace the IP address with the server’s IP address. This won’t prompt you for a password if you have set up SSH as described above. (Also, make sure you are not behind a proxy or firewall.) Creating a sudo user on ubuntu After ssh-ing into the server, the prompt becomes: root@pascal ~ $ Follow this DigitalOcean tutorial to create a sudo user on the server. After following this tutorial, logout. Now, we will allow the user login through ssh. For this, follow the steps: Login to the server again using root@139.59.67.18. cat .ssh/authorized_keys This will echo the contents of the file. Copy the contents. su - nitinkgp23 nitinkgp23 is the username of the sudo user that we created following the DO tutorial. mkdir .ssh &amp;amp;&amp;amp; cd .ssh : Create the folder and cd into it. touch authorized_keys : Create the file. Now, open the file using nano and paste the contents that you copied in Step 2. cd ~ : Come back to the home folder. Provide proper permissions to the ssh file : chmod 700 .ssh chmod 664 .ssh/authorized_keys chown nitinkgp23:nitinkgp23 /home/nitinkgp23 Logout You can login to the server now using username : ssh nitinkgp23@139.59.67.18 Install and configure RealVNC to access GUI Follow this tutorial to install RealVNC on your local computer and remote server. On running the command vncserver on remote server, suppose you get the output New 'X' desktop is your_server_name.com:1 Keep note of the number 1 . Now, come back to local computer, start VNC-Viewer (Install it, if not installed already), and create a new connection. Give the IP address as 139.59.67.18:1 . Note the number appended at last is 1. This will start the GUI access to the droplet. Workaround for proxy</summary></entry><entry><title type="html">Getting started with Go</title><link href="http://localhost:4000/tutorial/2017/10/29/getting-started-with-go/" rel="alternate" type="text/html" title="Getting started with Go" /><published>2017-10-29T00:00:00+05:30</published><updated>2017-10-29T00:00:00+05:30</updated><id>http://localhost:4000/tutorial/2017/10/29/getting-started-with-go</id><content type="html" xml:base="http://localhost:4000/tutorial/2017/10/29/getting-started-with-go/">&lt;p&gt;This tutorial walks through how I installed Go, and how I got started with it. I will keep on updating it, through my journey of learning Go.&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Retrieve the tarball using &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; by the following command:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, use &lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt; to extract the tarball :
 (Here &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; tells it to extract, &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; denotes verbose output and &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; denotes that we are mentioning a file name.)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tar xvf go1.6.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;This creates a directory go in the home directory. We recursively change Go’s owner and group to root and move it to &lt;code class=&quot;highlighter-rouge&quot;&gt;usr/local&lt;/code&gt; :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo chown -R root:root ./go
 sudo mv go /usr/local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;usr/local/go&lt;/code&gt; is the offical recommended location.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting up paths :&lt;/p&gt;

    &lt;p&gt;At the end of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;, add the following lines:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; export GOPATH=$HOME/work/go
 export PATH=$PATH:/usr/local/bin:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;GOPATH contains the path of the folder where you will write all your Go programs. After saving the file, refresh it by doing:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; source ~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This completes our installation process.&lt;/p&gt;

&lt;h1 id=&quot;writing-hello-world-program&quot;&gt;Writing “Hello World” program&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Create a working directory (which you added in the .profile as GOPATH) :
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mkdir -p work/go/src/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a simple Hello world file inside the above dir:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; nano ~/work/go/src/hello/hello.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Inside the editor, paste the code below:&lt;/p&gt;

    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello, world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Compile the above code using &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; command:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go install work/go/src/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This will create a binary in the dir &lt;code class=&quot;highlighter-rouge&quot;&gt;work/go/bin&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Execute this by just typing
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;since it is already added in the path.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>anomaly_</name></author><category term="go" /><summary type="html">This tutorial walks through how I installed Go, and how I got started with it. I will keep on updating it, through my journey of learning Go. Installation Retrieve the tarball using curl by the following command: curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz Next, use tar to extract the tarball : (Here x tells it to extract, v denotes verbose output and f denotes that we are mentioning a file name.) tar xvf go1.6.linux-amd64.tar.gz This creates a directory go in the home directory. We recursively change Go’s owner and group to root and move it to usr/local : sudo chown -R root:root ./go sudo mv go /usr/local (usr/local/go is the offical recommended location.) Setting up paths : At the end of the file ~/.profile, add the following lines: export GOPATH=$HOME/work/go export PATH=$PATH:/usr/local/bin:$GOPATH/bin GOPATH contains the path of the folder where you will write all your Go programs. After saving the file, refresh it by doing: source ~/.profile This completes our installation process. Writing “Hello World” program Create a working directory (which you added in the .profile as GOPATH) : mkdir -p work/go/src/hello Create a simple Hello world file inside the above dir: nano ~/work/go/src/hello/hello.go Inside the editor, paste the code below: package main import &quot;fmt&quot; func main() { fmt.Printf(&quot;hello, world\n&quot;) } Compile the above code using install command: go install work/go/src/hello This will create a binary in the dir work/go/bin Execute this by just typing hello since it is already added in the path.</summary></entry><entry><title type="html">Home automation</title><link href="http://localhost:4000/tutorial/2017/03/04/home-automation/" rel="alternate" type="text/html" title="Home automation" /><published>2017-03-04T00:00:00+05:30</published><updated>2017-03-04T00:00:00+05:30</updated><id>http://localhost:4000/tutorial/2017/03/04/home-automation</id><content type="html" xml:base="http://localhost:4000/tutorial/2017/03/04/home-automation/">&lt;p&gt;Lying on the bed, just before dozing off to sleep every night, I wondered how wonderful it would be if my roomie would get up from his bed and switch off the tubelight for me. Ohh, throwing all sort of tantrums and tempting offers to my roomies to make them get up from bed for me was hell of a job. Sometimes I would succeed, but mostly, I would have to get out from the quilt, in shivering cold, and trouble my legs to walk a 3 metre distance to turn off the switch.
&lt;!-- more --&gt;
And then, I came across this wonderful thing called Arduino. A bit of googling, and I was ready to automate my tubelights and fans, so that I would control them from my mobile phone itself. No more tantrums and no more trouble to my legs. I was glad.&lt;/p&gt;

&lt;p&gt;Here is a detailed explanation of what I used, and the steps required to automate your room!&lt;/p&gt;

&lt;h2 id=&quot;required&quot;&gt;Required&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Arduino UNO  (Purchase here)&lt;/li&gt;
  &lt;li&gt;Bluetooth Module (Purchase here)&lt;/li&gt;
  &lt;li&gt;Breadboard / PCB board&lt;/li&gt;
  &lt;li&gt;Wires , Jumper wires&lt;/li&gt;
  &lt;li&gt;12 V relay (1 relay for each device you want to control)&lt;/li&gt;
  &lt;li&gt;12 V adapter&lt;/li&gt;
  &lt;li&gt;TIP 122 transistor&lt;/li&gt;
  &lt;li&gt;Android phone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog won’t explain the theoretical reasons behind each of the steps, or the working of Arduino or anything that is of no use in the project. It just serves as a guide to the steps you need to follow, to build a home automated system. A little knowledge about how circuits work will suffice.&lt;/p&gt;

&lt;p&gt;This is an Arduino UNO board. There are 14 digital I/O pins, and 6 analog inputs, 3 GND pins, a 3.3 V and a 5 V pin. We will be using pin 13 for controlling the appliance, pin 1 and pin 0 will be used for connecting to the bluetooth module, and 5 V pin will be used to power the bluetooth module. GND pins will be used for connecting to the ground.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/48912-arduinouno_r3_front.jpg&quot; alt=&quot;Arduino&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is HC-05 bluetooth module, which will be used for communicating through the mobile device. It will have the usual range of 10 m, but if you want to have a higher range, you can look at other modules available online.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/134883010_14170929051_large1.jpg&quot; alt=&quot;HC-05 bluetooth module&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The module that you have bought might consist of 6 pins, but we will be using only 4 pins that lie in the middle, labelled VCC, GND, TX and RX. An important thing to note here is that, TX pins have to be connected at 3.3 V Level, whereas the power required in the bluetooth module is 3.6-6 V. Hence, we have to use the 5 V pin from the arduino to power the module, and divide the voltage and drop it down to 3.3 V, so that bluetooth module doesn’t get cooked up.&lt;/p&gt;

&lt;p&gt;Here is how a connection should be made between arduino and the bluetooth module :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/134883010_14170929051_large1.jpg&quot; alt=&quot;Connecting arduino and bluetooth&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;points-to-be-noted&quot;&gt;Points to be noted:&lt;/h4&gt;

&lt;p&gt;RX pin of the module connects to TX pin of the arduino and vice-versa.
TX pin of the module works at not more than 3.3 V level, hence a voltage-divider circuit is used, where 1/3 * 5 V goes to the GND, whereas only 2/3 * 5 V is used up in the RX pin of the arduino.
Connect GND of the module to any of the GND pins on the arduino board.
Connect VCC of the module to 5 V pin of the arduino board.
Controlling a LED by bluetooth:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/nitinkgp23/nitinkgp23.github.io/blob/master/assets/images/posts/home-automation/screenshot-from-2017-01-17-17-09-55.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make the above connection. The above diagram only shows how to make the connection. You are free to connect the LED and wires through PCB board or breadboard. Use a proper resistor according to the LED you are using.&lt;/p&gt;

&lt;p&gt;A 220 ohm resistor for a red LED will be okay, if you are connecting the arduino by USB,&lt;/p&gt;

&lt;h4 id=&quot;uploading-the-code-to-arduino-board-&quot;&gt;Uploading the code to Arduino board :&lt;/h4&gt;

&lt;p&gt;First of all, download Arduino IDE from here. Follow the instructions and install the IDE. Connect the arduino board to computer, and upload the following code to the board. Google a bit on how to use the Arduino IDE, and how to upload a code. While uploading, make sure you have disconnected the RX and TX pins from the bluetooth module, otherwise an error will flash up. After the code has uploaded successfully, reconnect the RX and TX pins.&lt;/p&gt;

&lt;h4 id=&quot;downloading-the-app-from-play-store-&quot;&gt;Downloading the app from play store :&lt;/h4&gt;

&lt;p&gt;Download &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.app.control&amp;amp;hl=en&quot;&gt;this&lt;/a&gt; app from Google Play Store (Arduino bluetooth control , by Guiming Apps), and install it in your android phone.&lt;/p&gt;</content><author><name>anomaly_</name></author><category term="arduino" /><category term="automation" /><summary type="html">Lying on the bed, just before dozing off to sleep every night, I wondered how wonderful it would be if my roomie would get up from his bed and switch off the tubelight for me. Ohh, throwing all sort of tantrums and tempting offers to my roomies to make them get up from bed for me was hell of a job. Sometimes I would succeed, but mostly, I would have to get out from the quilt, in shivering cold, and trouble my legs to walk a 3 metre distance to turn off the switch.</summary></entry><entry><title type="html">Theme posts</title><link href="http://localhost:4000/foo/2013/12/25/post-stylings/" rel="alternate" type="text/html" title="Theme posts" /><published>2013-12-25T05:00:04+05:30</published><updated>2013-12-25T05:00:04+05:30</updated><id>http://localhost:4000/foo/2013/12/25/post%20stylings</id><content type="html" xml:base="http://localhost:4000/foo/2013/12/25/post-stylings/">&lt;p&gt;This is a link post. Clicking on the link should open &lt;a href=&quot;http://www.google.com/&quot;&gt;Google&lt;/a&gt; in a new tab or window.&lt;/p&gt;

&lt;h2 id=&quot;block-quote&quot;&gt;Block Quote&lt;/h2&gt;

&lt;h3 id=&quot;normal-blockquote&quot;&gt;Normal blockquote&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.
&lt;!-- more --&gt;&lt;/p&gt;
  &lt;h2 id=&quot;code-block&quot;&gt;Code Block&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;inline-code-block&quot;&gt;Inline code block&lt;/h3&gt;

&lt;p&gt;This is a inline code block: &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;print 'helloworld'&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;normal-code-block&quot;&gt;Normal code block&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert('Hello World!');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print &quot;Hello world&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;highlight-code-block&quot;&gt;Highlight code block&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;gist&quot;&gt;Gist&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/996818.js&quot;&gt; &lt;/script&gt;</content><author><name>anomaly_</name></author><summary type="html">This is a link post. Clicking on the link should open Google in a new tab or window. Block Quote Normal blockquote Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna.</summary></entry></feed>